/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  text?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  summary?: string;
  status?: "review" | "appeal" | "progress" | "completed";
  coverImage?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  votes?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  username?: string;
  email?: string;
  avatar?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | SanityAssetSourceData
  | Comment
  | Project
  | Slug
  | User;
export declare const internalGroqTy; // Source: ./src/sanity/lib/queries.ts
// Variable: PROJECTS_QUERY
// Query: *[_type=='project' && !defined($search) || title match $search || description match $search || summary match $search] | order(_createdAt desc){_id, title, slug, _createdAt, summary, status, description, votes, _type, _updatedAt, _rev, coverImage}
export type PROJECTS_QUERYResult = Array<
  | {
      _id: string;
      title: null;
      slug: null;
      _createdAt: string;
      summary: null;
      status: null;
      description: null;
      votes: null;
      _type: "comment";
      _updatedAt: string;
      _rev: string;
      coverImage: null;
    }
  | {
      _id: string;
      title: string | null;
      slug: Slug | null;
      _createdAt: string;
      summary: string | null;
      status: "appeal" | "completed" | "progress" | "review" | null;
      description: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      votes: number | null;
      _type: "project";
      _updatedAt: string;
      _rev: string;
      coverImage: string | null;
    }
  | {
      _id: string;
      title: string | null;
      slug: null;
      _createdAt: string;
      summary: null;
      status: null;
      description: string | null;
      votes: null;
      _type: "sanity.fileAsset";
      _updatedAt: string;
      _rev: string;
      coverImage: null;
    }
  | {
      _id: string;
      title: string | null;
      slug: null;
      _createdAt: string;
      summary: null;
      status: null;
      description: string | null;
      votes: null;
      _type: "sanity.imageAsset";
      _updatedAt: string;
      _rev: string;
      coverImage: null;
    }
  | {
      _id: string;
      title: null;
      slug: null;
      _createdAt: string;
      summary: null;
      status: null;
      description: null;
      votes: null;
      _type: "user";
      _updatedAt: string;
      _rev: string;
      coverImage: null;
    }
>;
// Variable: PROJECT_QUERY
// Query: *[_type=='project' && slug.current == $slug]{_id, title, slug, _createdAt, summary, status, description, votes, _type, _updatedAt, _rev}
export type PROJECT_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  _createdAt: string;
  summary: string | null;
  status: "appeal" | "completed" | "progress" | "review" | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  votes: number | null;
  _type: "project";
  _updatedAt: string;
  _rev: string;
}>;
// Variable: PROJECTVOTES_QUERY
// Query: *[_type=='project' && _id == $projectId]{_id, votes}
export type PROJECTVOTES_QUERYResult = Array<{
  _id: string;
  votes: number | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type=='project' && !defined($search) || title match $search || description match $search || summary match $search] | order(_createdAt desc){_id, title, slug, _createdAt, summary, status, description, votes, _type, _updatedAt, _rev, coverImage}": PROJECTS_QUERYResult;
    "*[_type=='project' && slug.current == $slug]{_id, title, slug, _createdAt, summary, status, description, votes, _type, _updatedAt, _rev}": PROJECT_QUERYResult;
    "*[_type=='project' && _id == $projectId]{_id, votes}": PROJECTVOTES_QUERYResult;
  }
}
